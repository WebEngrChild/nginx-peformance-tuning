user  nginx;

# workerプロセスの数を指定する。
worker_processes auto;

# workerプロセスが開くファイル数の上限。
worker_rlimit_nofile 100000;
events {
    # 1workerプロセスの同時接続数の最大値。リバースプロキシとして利用する場合、1接続あたり、クライアントからの接続とプロキシとしての接続の2接続を考える必要がある。
    # worker_rlimit_nofile / 2（接続）× 2（安全率）
    # 一般的には、 worker_connections は worker_rlimit_nofile の50-75%の値が良いとされています。
    worker_connections 2048;
    # 同時に複数のアクセスを受け入れることができる。
    multi_accept on;
    # epollはlinuxカーネル2.6以降で利用可能なIO多重化のシステムコール。nginxが自動で効率的なものを選択してくれるが明示的に指定も可能。
    use epoll;
}

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

http {
    include       /etc/nginx/mime.types;

    # この行は、リクエストを初めて受け取るNginxサーバーが見ているリモートアドレス（通常はクライアントのIPアドレス）を、X-Real-IPというHTTPヘッダーにセットします。これにより、バックエンドのサーバーはこのHTTPヘッダーを参照することで、クライアントの実際のIPアドレスを知ることができます。
    proxy_set_header X-Real-IP $remote_addr;
    # このヘッダーは、リクエストが何台のプロキシサーバーを経由してきたのかをトラックするために使用されます。既にX-Forwarded-Forが存在する場合、Nginxは新しいリモートアドレス（クライアントIPまたは前のプロキシサーバーのIP）を既存の値に追加します。
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

    # server_tokens off; という設定は、NginxのHTTPレスポンスヘッダーから、Nginxのバージョン情報を隠すためのもの
    server_tokens off;

    # 静的ファイルを効率的に送信。Nginxでバックエンドの処理をキャッシュする場合に使う。Nginxはオペレーティングシステムのsendfileシステムコールを使用するようになります。
    sendfile on;
    # この設定オプションを使うと、ヘッダーと最初の部分のボディが同じTCPパケットにまとめられ、一緒に送信されます。これにより、ネットワーク遅延が減少し、Webページのロード時間が短縮される場合があります。
    tcp_nopush on;

    # "On"にすると、Nginxはデータを送信する際に、少し待って複数の小さなデータを1つのパケットにまとめて送信します。これにより、ネットワークのオーバーヘッドが減少し、帯域幅が節約されます。
    tcp_nodelay off;

    # クライアントからのkeep-alive接続がこの秒数を超えるとタイムアウトします。
    # ============================================================
    #
    # これにより、ALBがまずタイムアウトに達することを確実にし、Nginxが無駄にリソースを消費することを防ぐことが一般的です。
    # Nginxのkeepalive_timeout、client_header_timeout、client_body_timeoutなどのタイムアウトは、通常、ALBの設定よりも長く設定されます。
    # HTTPリクエストとレスポンスの交換が完了した後、そのTCP接続がどれくらいの時間アイドル状態で保持されるかを定義します。
    #
    # ============================================================
    keepalive_timeout 3;

    # クライアントからのヘッダー受信がこの秒数を超えるとタイムアウトします。
    client_header_timeout 60;

    # クライアントが送信するボディデータがこの秒数を超えるとタイムアウトします。
    client_body_timeout 60;

    # タイムアウトした接続をリセットします。
    reset_timedout_connection on;

    # Nginxがクライアントに対してHTTPレスポンス（例：HTML, CSS, 画像ファイル等）を送信している間に適用されるタイムアウトです。
    send_timeout 60;

    # ============================================================
    #
    # limit_conn_zone と limit_conn の設定は、Nginxがハンドルする接続数を制限するためのものです。
    # これは、DoS攻撃（Denial of Service）などからサーバを守るため、またはリソースの利用を均等に保つために使用されます。
    #
    # ============================================================
    # リモートアドレスを基に接続数を制限するためのゾーンを設定します。
    limit_conn_zone $binary_remote_addr zone=addr:10m;
    # 同一アドレスからの同時接続数を100に制限します。
    limit_conn addr 100;

    # デフォルトのMIMEタイプを指定します。
    default_type text/html;

    # 出力文字列のエンコーディングをUTF-8に設定します。
    charset UTF-8;

    # ============================================================
    #
    # GZip圧縮はウェブページのロード速度を向上させ、帯域幅を節約します。これは特にモバイルや低帯域幅環境で有益です。
    # また、サーバーとクライアントの負荷を軽減し、SEO対策にも寄与します。
    # ただし、圧縮にはCPUリソースが必要なため、高負荷環境での使用は慎重な調整とテストが求められます。
    #
    # ============================================================

    # Gzip圧縮を有効にします。
    gzip on;

    # Gzipを使用するHTTPバージョンを指定します。
    gzip_http_version 1.0;

    # IE6でGzipを無効にします。
    gzip_disable "msie6";

    # プロキシされた任意のレスポンスでGzipを有効にします。
    gzip_proxied any;

    # このサイズを下回るレスポンスにはGzipを適用しません。
    gzip_min_length 1024;

    # Gzipの圧縮レベルを設定します。
    gzip_comp_level 6;

    # Gzip圧縮を適用するMIMEタイプを指定します。
    gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript application/javascript application/json;

    # ============================================================#
    #
    # この設定はNginxがオープンしたファイル、例えば静的なコンテンツのファイルや設定ファイルなどをキャッシュする際のパラメータを設定しています。
    # これらの設定は主にパフォーマンス向上のために使用され、ディスクへのアクセス回数を減少させることでI/Oのオーバーヘッドを削減します。
    #
    # ============================================================

    # オープンされたファイルのキャッシュ設定をします。
    open_file_cache max=1000 inactive=10s;

    # キャッシュされたファイルが有効である時間を設定します。
    open_file_cache_valid 60s;

    # キャッシュを使う最小回数を設定します。
    open_file_cache_min_uses 1;

    # キャッシュに関するエラーを有効にします。
    open_file_cache_errors on;

    # 追加の設定ファイルを含めます。
    include /etc/nginx/conf.d/*.conf;

    # 有効なサイト設定を含めます。
    include /etc/nginx/sites-enabled/*;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for" "$request_time"';

    access_log  /var/log/nginx/access.log  main;

    include /etc/nginx/conf.d/*.conf;
}